TODO: Make support for expression-ids in keys when streaming to and from server.
TODO: Causality: Should upon change do start a pulse?
TODO: Take use of bower in some intelligent way... 
TODO: Put all state variables in the state object, so that context switching is possible. 
TODO: Rebuild selections so that they refer to the objects they include, to avoid global id->object map.
TODO: consider selection logics and loop control... selectAll especially creates a need for loop control, but loop control could backfire... 
TODO: rethink and validate the unstreaming of indicies... what if the leaf of an index tree is unserialized first... then the referringObject cannot be determined...


isLoaded(object, selector).... should it perhaps use a selection locally to see if everything is loaded?... or should it depend on loading tags?.... 

isSubscribed(object, selector) ... stronger... is part of subscription...



Does and donts when programming liquid:

1. Keep your constructors empty! Ever since the idea of constructors, the idea has been to initialize and build things inside a constructor. While this works fine in a non-reactive world, it becomes an anti pattern in the reactive world, where objects needs to be constructed as a consequence of beeing loaded from database or server. So, what to do instead? Simply follow the convention of placing all initialization in a special initialize method for each class! Simple as that! Just remember it!

2. Never write code that updates things! If you have a need to update some data, it is a sign you are leaving the reactive world, or have a hybrid system that is both reactive and impreative. There are many valid situations where this is perfectly fine, typically when liquid is beeing integrated with some other system in a framework. However, as a general rule of thumb, application code should never do it.  

 